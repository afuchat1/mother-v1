{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the AfuChat application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL of the user's avatar image.",
          "format": "uri"
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single message within a chat conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat message."
        },
        "senderId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ChatMessage). Identifier of the user who sent the message."
        },
        "chatRoomId": {
          "type": "string",
          "description": "Reference to ChatRoom. (Relationship: ChatRoom 1:N ChatMessage). Identifier of the chat room the message belongs to."
        },
        "messageType": {
          "type": "string",
          "description": "Type of the message (e.g., 'text', 'image', 'voice')."
        },
        "content": {
          "type": "string",
          "description": "Content of the message. Could be text, URL to image, or URL to voice recording."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "senderId",
        "chatRoomId",
        "messageType",
        "content",
        "timestamp"
      ]
    },
    "ChatRoom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatRoom",
      "type": "object",
      "description": "Represents a chat room, either a direct message between two users or a group chat.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat room."
        },
        "name": {
          "type": "string",
          "description": "Name of the chat room (for group chats). Null for direct messages."
        },
        "type": {
          "type": "string",
          "description": "Type of chat room ('direct' or 'group')."
        },
        "participantIds": {
          "type": "array",
          "description": "References to UserProfiles. Identifiers of the users participating in the chat room. (Relationship: ChatRoom N:N UserProfile)",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the chat room was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "type",
        "participantIds"
      ]
    },
    "AfuMallListing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AfuMallListing",
      "type": "object",
      "description": "Represents a product listing in the AfuMall.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product listing."
        },
        "sellerId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N AfuMallListing). Identifier of the user who is selling the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the listing was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "sellerId",
        "name",
        "description",
        "price",
        "imageUrl"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/chatRooms/{chatRoomId}",
        "definition": {
          "entityName": "ChatRoom",
          "schema": {
            "$ref": "#/backend/entities/ChatRoom"
          },
          "description": "Stores chat room metadata. Includes denormalized 'participantIds' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "chatRoomId",
              "description": "The unique identifier for the chat room."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/chatRooms/{chatRoomId}/messages/{messageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages within a chat room. Inherits authorization from the chat room.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "chatRoomId",
              "description": "The unique identifier for the chat room."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the chat message."
            }
          ]
        }
      },
      {
        "path": "/afuMallListings/{listingId}",
        "definition": {
          "entityName": "AfuMallListing",
          "schema": {
            "$ref": "#/backend/entities/AfuMallListing"
          },
          "description": "Stores AfuMall product listings. Access is controlled by the 'sellerId' field.",
          "params": [
            {
              "name": "listingId",
              "description": "The unique identifier for the AfuMall listing."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support AfuChat's core features: user profiles, chat system, AfuMall, and AI assistant integration. It prioritizes authorization independence, clarity, and scalability. User profiles are stored in a dedicated collection. ChatRooms and ChatMessages are nested under users to ensure clear ownership and authorization. AfuMall listings are stored in a separate collection and owned by users via the sellerId field. This design allows for efficient querying and secure access control. Denormalization is applied where necessary to avoid complex queries and maintain data integrity. Specifically, for ChatRooms, the participantIds are denormalized to ensure authorization independence. This avoids the need for complex `get()` calls in security rules when accessing messages within a chat room. All paths follow a consistent naming convention, and ownership is explicitly defined to simplify security rules and improve debuggability. The structure supports QAPs (Rules are not Filters) by segregating data with different access requirements into separate collections, like storing user profiles separate from AfuMall listings."
  }
}