/**
 * @fileOverview Firestore Security Rules for AfuChat application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model, ensuring users can only
 * access their own profile data and participate in authorized chat rooms. The
 * AfuMall listings are publicly readable, but writes are restricted to the
 * seller of the listing.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /users/{userId}/chats/{chatId}: Chat room metadata for a user.
 * - /users/{userId}/chats/{chatId}/messages/{messageId}: Chat messages within a specific chat.
 * - /users/{userId}/aiChats/default/messages/{messageId}: AI chat messages for a user.
 * - /afuMallListings/{listingId}: Product listings in the AfuMall, publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible by the owning user.
 * - Chat access is based on explicit participation, enforced by checking the `participantIds` array.
 * - AfuMall listings are publicly readable to facilitate discovery.
 * - Listing writes are restricted to the seller only using the `sellerId`.
 *
 * Denormalization for Authorization:
 * - Chat messages require a `senderId` field to match the authenticated user's UID.
 * - AfuMall listings require a `sellerId` field to match the authenticated user's UID.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` path, while public product
 *   listings are stored in the top-level `/afuMallListings` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create, update, delete) User with matching {userId} can modify their own profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @allow (get, list) User with matching {userId} can read their own profile.
     * @deny (get, list) User attempts to read another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
     /**
     * @description Controls access to users collection.
     * @path /users
     * @allow (list) Authenticated users can list all other users.
     * @deny (get) Users cannot retrieve user documents directly
     * @deny (create, update, delete) Users cannot create, update, or delete other user documents.
     * @principle Allows authenticated users to search/list other users while preventing unauthorized access.
     */
    match /users {
      allow get: if false;
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to chat room references for a specific user.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create, update, delete) User with matching {userId} can manage their own chat references.
     * @deny (create, update, delete) User attempts to manage another user's chat references.
     * @allow (get, list) User with matching {userId} can read their own chat references.
     * @deny (get, list) User attempts to read another user's chat references.
     * @principle Enforces document ownership for chat references.
     */
    match /users/{userId}/chats/{chatId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chat messages within a user's specific chat.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create, update) User can create messages if senderId matches their auth UID.
     * @deny (create, update) User attempts to create messages with a mismatched senderId.
     * @allow (get, list) User can read messages if they are a participant in the chat.
     * @deny (get, list) User attempts to read messages in a chat they are not a participant in.
     * @principle Enforces chat participation for message access.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      allow get: if isChatParticipant(userId, chatId);
      allow list: if isChatParticipant(userId, chatId);
      allow create: if request.resource.data.senderId == request.auth.uid;
      allow update: if request.resource.data.senderId == request.auth.uid;
      allow delete: if false; // Messages cannot be deleted
    }

    /**
     * @description Controls access to AI chat messages for a specific user.
     * @path /users/{userId}/aiChats/default/messages/{messageId}
     * @allow (create, update, delete) User with matching {userId} can manage their own AI chat messages.
     * @deny (create, update, delete) User attempts to manage another user's AI chat messages.
     * @allow (get, list) User with matching {userId} can read their own AI chat messages.
     * @deny (get, list) User attempts to read another user's AI chat messages.
     * @principle Enforces document ownership for AI chat messages.
     */
    match /users/{userId}/aiChats/default/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to AfuMall product listings.
     * @path /afuMallListings/{listingId}
     * @allow (get, list) All authenticated users can read and list the product listings.
     * @allow (create, update, delete) User can create, update, or delete listings if sellerId matches their auth UID.
     * @deny (create, update, delete) User attempts to modify listings they don't own.
     * @principle Allows public read access with owner-only writes for product listings.
     */
    match /afuMallListings/{listingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if request.resource.data.sellerId == request.auth.uid;
      allow update: if request.resource.data.sellerId == request.auth.uid;
      allow delete: if request.resource.data.sellerId == request.auth.uid;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
    
  function isChatParticipant(userId, chatId) {
    let chatDocument = get(/databases/$(database)/documents/users/$(userId)/chats/$(chatId)).data;
    return isSignedIn() && chatDocument.participantIds.hasAny([request.auth.uid]);
  }

  function isSeller(sellerId) {
    return request.auth.uid == sellerId;
  }

  function isExistingSeller(sellerId) {
    return request.auth.uid == sellerId && resource != null;
  }
}