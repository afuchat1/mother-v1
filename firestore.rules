/**
 * @fileoverview Firestore Security Rules for AfuChat application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization based on user identity and explicit data relationships.
 * It uses a combination of path-based ownership and denormalized access control lists to secure data.
 * It avoids complex queries in rules by denormalizing authorization data directly onto documents.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /chatRooms/{chatRoomId}: Chat rooms with a list of participant IDs for access control.
 * - /chatRooms/{chatRoomId}/messages/{messageId}: Messages within chat rooms, inherit access from the chat room.
 * - /afuMallListings/{listingId}: Product listings in AfuMall, owned by the seller.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Chat room access is granted to participants listed in the 'participantIds' array.
 * - AfuMall listings can only be created, updated, or deleted by the seller.
 * - List operations are generally allowed only for the owning user or when the data is explicitly intended to be public.
 *
 * Denormalization for Authorization:
 * - ChatRoom documents contain a `participantIds` array for efficient access control.
 *
 * Structural Segregation:
 * - No segregation explicitly defined but can be implemented with new collections if necessary (e.g., public vs. private posts).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create their own profile.
     * @allow (get, list, update, delete) User 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read and modify their own profile.
     * @deny (create) User ' অন্যID' cannot create profile for user 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @deny (get, list, update, delete) User ' অন্যID' cannot read or modify the profile of user 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isOwner checks if the request.auth.uid matches the userId in the path
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat room documents.
     * @path /chatRooms/{chatRoomId}
     * @allow (get, list) Any authenticated user can read any chat room.
     * @allow (create) Any authenticated user can create a chat room (if the participantIds includes them).
     * @allow (update, delete) Only participants of the chat room can update or delete it.
     * @deny (update, delete) A non-participant cannot update or delete a chat room.
     * @principle Enforces shared access based on the 'participantIds' array.
     */
    match /chatRooms/{chatRoomId} {
      // isParticipant checks if the request.auth.uid is present in the participantIds array
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]) && resource != null;
      allow delete: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]) && resource != null;
    }

    /**
     * @description Controls access to chat messages within a chat room.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (get, list) Any participant of the parent chat room can read messages.
     * @allow (create) Any participant of the parent chat room can create messages.
     * @allow (update, delete) No one can update or delete messages (messages are immutable).
     * @deny (update, delete) No one can update or delete messages.
     * @principle Inherits access control from the parent chat room and enforces immutability.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
      // isChatRoomParticipant checks if the request.auth.uid is a participant in the chatRoomId
      allow get, list: if isChatRoomParticipant(chatRoomId);
      allow create: if isChatRoomParticipant(chatRoomId);
      allow update, delete: if false;
    }

    /**
     * @description Controls access to AfuMall listings.
     * @path /afuMallListings/{listingId}
     * @allow (get, list) Any authenticated user can read any listing.
     * @allow (create) Only an authenticated user can create a listing with their sellerId.
     * @allow (update, delete) Only the seller can update or delete their listings.
     * @deny (create) A user cannot create a listing with another user's sellerId.
     * @deny (update, delete) A non-seller cannot update or delete another user's listing.
     * @principle Enforces ownership based on the 'sellerId' field.
     */
    match /afuMallListings/{listingId} {
      // isSeller checks if the request.auth.uid matches the sellerId in the document
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isExistingSeller(resource.data.sellerId);
      allow delete: if isExistingSeller(resource.data.sellerId);
    }

    // --- Helper Functions ---

    // isSignedIn checks if the request is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // isOwner checks if the request.auth.uid matches the userId in the path
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // isExistingOwner checks if the request.auth.uid matches the userId in the path AND the document exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // isSeller checks if the request.auth.uid matches the sellerId in the document
    function isSeller(sellerId) {
      return request.auth.uid == sellerId;
    }

    // isExistingSeller checks if the request.auth.uid matches the sellerId in the document AND the document exists
    function isExistingSeller(sellerId) {
      return isSeller(sellerId) && resource != null;
    }

    // isChatRoomParticipant checks if the request.auth.uid is a participant in the chatRoomId
    function isChatRoomParticipant(chatRoomId) {
      return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId))
          && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds.hasAny([request.auth.uid]);
    }
  }
}