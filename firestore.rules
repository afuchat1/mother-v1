rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create their profile.
     * @allow (get, list) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read their profile.
     * @allow (update, delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update/delete their profile.
     * @deny (create) User with ID 'attackerId' cannot create a profile with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Controls access to chat room documents.
     * @path /chatRooms/{chatRoomId}
     * @allow (get, list) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read chat room 'chatRoom1' if they are a participant.
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create a chat room if they are a participant.
     * @allow (update, delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update/delete chat room 'chatRoom1' if they are a participant.
     * @deny (get, list) User with ID 'attackerId' cannot read chat room 'chatRoom1' if they are not a participant.
     * @principle Enforces shared access based on the 'participantIds' array.
     */
    match /chatRooms/{chatRoomId} {
      allow get: if isParticipant(resource.data.participantIds);
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.participantIds is list && request.auth.uid in request.resource.data.participantIds;
      allow update: if isSignedIn() && request.resource.data.participantIds is list && request.auth.uid in resource.data.participantIds;
      allow delete: if isSignedIn() && request.resource.data.participantIds is list && request.auth.uid in resource.data.participantIds;
    }

    /**
     * @description Controls access to chat messages within a chat room.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (get, list) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read message 'message1' if they are a participant in 'chatRoom1'.
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create message 'message1' if they are a participant in 'chatRoom1'.
     * @allow (update, delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update/delete message 'message1' if they are a participant in 'chatRoom1'.
     * @deny (get, list) User with ID 'attackerId' cannot read message 'message1' if they are not a participant in 'chatRoom1'.
     * @principle Inherits authorization from the parent chat room.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
      allow get: if isChatRoomParticipant(chatRoomId);
      allow list: if isChatRoomParticipant(chatRoomId);
      allow create: if isChatRoomParticipant(chatRoomId);
      allow update: if isChatRoomParticipant(chatRoomId);
      allow delete: if isChatRoomParticipant(chatRoomId);
    }

    /**
     * @description Controls access to AfuMall product listings.
     * @path /afuMallListings/{listingId}
     * @allow (get, list) Any user can read product listing 'listing1'.
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create a product listing where sellerId matches their ID.
     * @allow (update, delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update/delete product listing 'listing1' if they are the seller.
     * @deny (create) User with ID 'attackerId' cannot create a listing with sellerId 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @principle Allows public reads with owner-only writes based on the 'sellerId' field.
     */
    match /afuMallListings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    function isSelf(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isParticipant(participantIds) {
    return isSignedIn() && participantIds is list && request.auth.uid in participantIds;
  }

  function getChatRoom(chatRoomId) {
      return get(/databases/$(database)/documents/chatRooms/$(chatRoomId));
  }

  function isChatRoomParticipant(chatRoomId) {
    return exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)) && isSignedIn() && getChatRoom(chatRoomId).data.participantIds is list && request.auth.uid in getChatRoom(chatRoomId).data.participantIds;
  }
}