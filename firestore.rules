/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and a shared-access model for chat rooms.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /chatRooms/{chatRoomId}: Stores chat room metadata, including participant IDs.
 * - /chatRooms/{chatRoomId}/messages/{messageId}: Stores chat messages within a chat room.
 * - /afuMallListings/{listingId}: Stores product listings in AfuMall, with access controlled by the seller ID.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Chat rooms use a shared-access model based on the 'participantIds' array.
 * - AfuMall listings are owned by the seller, who can create, update, and delete them.
 * - All write operations are explicitly authorized. No open writes are permitted.
 *
 * Denormalization for Authorization:
 * - The `ChatRoom` entity denormalizes `participantIds` directly on the document to avoid costly `get()` calls when authorizing access to messages.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create their own profile.
     * @allow (get) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read their own profile.
     * @allow (update) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update their own profile.
     * @allow (delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can delete their own profile.
     * @deny (create) User with ID 'attackerId' cannot create a profile for 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @deny (get) User with ID 'attackerId' cannot read the profile of 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @deny (update) User with ID 'attackerId' cannot update the profile of 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @deny (delete) User with ID 'attackerId' cannot delete the profile of 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chat room metadata.
     * @path /chatRooms/{chatRoomId}
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create a chat room if they are a participant.
     * @allow (get) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read a chat room if they are a participant.
     * @allow (update) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update a chat room if they are a participant.
     * @allow (delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can delete a chat room if they are a participant.
     * @deny (create) User with ID 'attackerId' cannot create a chat room without being a participant.
     * @deny (get) User with ID 'attackerId' cannot read a chat room if they are not a participant.
     * @deny (update) User with ID 'attackerId' cannot update a chat room if they are not a participant.
     * @deny (delete) User with ID 'attackerId' cannot delete a chat room if they are not a participant.
     * @principle Enforces shared access based on the 'participantIds' array within the document.
     */
    match /chatRooms/{chatRoomId} {
      allow get: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow delete: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
    }

    /**
     * @description Controls access to chat messages within a chat room.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create a message in a chat room if they are a participant.
     * @allow (get) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read a message in a chat room if they are a participant.
     * @allow (list) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can list messages in a chat room if they are a participant.
     * @allow (update) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update a message in a chat room if they are a participant.
     * @allow (delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can delete a message in a chat room if they are a participant.
     * @deny (create) User with ID 'attackerId' cannot create a message in a chat room if they are not a participant.
     * @deny (get) User with ID 'attackerId' cannot read a message in a chat room if they are not a participant.
     * @deny (list) User with ID 'attackerId' cannot list messages in a chat room if they are not a participant.
     * @deny (update) User with ID 'attackerId' cannot update a message in a chat room if they are not a participant.
     * @deny (delete) User with ID 'attackerId' cannot delete a message in a chat room if they are not a participant.
     * @principle Inherits authorization from the chat room and enforces shared access.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
      allow get: if isSignedIn() && isParticipant(chatRoomId);
      allow list: if isSignedIn() && isParticipant(chatRoomId);
      allow create: if isSignedIn() && isParticipant(chatRoomId);
      allow update: if isSignedIn() && isParticipant(chatRoomId);
      allow delete: if isSignedIn() && isParticipant(chatRoomId);
    }

    /**
     * @description Controls access to AfuMall product listings.
     * @path /afuMallListings/{listingId}
     * @allow (create) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create a listing if they are the seller.
     * @allow (get) Any user can read a listing.
     * @allow (list) Any user can list listings.
     * @allow (update) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can update a listing if they are the seller.
     * @allow (delete) User with ID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can delete a listing if they are the seller.
     * @deny (create) User with ID 'attackerId' cannot create a listing for 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2'.
     * @deny (update) User with ID 'attackerId' cannot update a listing they don't own.
     * @deny (delete) User with ID 'attackerId' cannot delete a listing they don't own.
     * @principle Enforces owner-only writes while allowing public reads.
     */
    match /afuMallListings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the resource.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Checks if the user is a participant in the chat room.
  function isParticipant(chatRoomId) {
    return get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds.hasAny([request.auth.uid]);
  }
}