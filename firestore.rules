rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create, update, delete) - User with UID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can create/update/delete their own profile at /users/dnSEb4FRr8gcxnQZVZSqKKJ4rAu2.
     * @allow (get, list) - User with UID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can read their profile at /users/dnSEb4FRr8gcxnQZVZSqKKJ4rAu2.
     * @deny (create, update, delete) - User with UID 'otherUserId' cannot create/update/delete profile at /users/dnSEb4FRr8gcxnQZVZSqKKJ4rAu2.
     * @deny (get, list) - User with UID 'otherUserId' cannot read profile at /users/dnSEb4FRr8gcxnQZVZSqKKJ4rAu2.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure chat rooms, allowing participants to read and write.
     * @path /chatRooms/{chatRoomId}
     * @allow (get, list) - User with UID 'participantId' can read a chat room if 'participantId' is in the 'participantIds' array.
     * @allow (create) - User can create a chat room.
     * @allow (update) - Only a participant can update the chat room details.
     * @allow (delete) - Only a participant can delete the chat room.
     * @deny (get, list) - User with UID 'nonParticipantId' cannot read a chat room if 'nonParticipantId' is not in the 'participantIds' array.
     * @principle Enforces shared access based on the 'participantIds' array in the chat room document.
     */
    match /chatRooms/{chatRoomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant() {
          return isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      }

      allow get, list: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow create: if isSignedIn();
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }

    /**
     * @description Secure chat messages within chat rooms, allowing only chat room participants to read and write.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (get, list) - User with UID 'participantId' can read a chat message if they are a participant in the chat room.
     * @allow (create) - User with UID 'participantId' can create a chat message if they are a participant in the chat room.
     * @allow (update) - User with UID 'participantId' can update a chat message if they are a participant in the chat room.
     * @allow (delete) - User with UID 'participantId' can delete a chat message if they are a participant in the chat room.
     * @deny (get, list) - User with UID 'nonParticipantId' cannot read a chat message if they are not a participant in the chat room.
     * @principle Inherits authorization from the parent chat room, ensuring only participants can access messages.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

        function isParticipant(chatRoomId) {
            return isSignedIn() && get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds.hasAny([request.auth.uid]);
        }

      allow get, list: if isParticipant(chatRoomId);
      allow create: if isParticipant(chatRoomId);
      allow update: if isParticipant(chatRoomId);
      allow delete: if isParticipant(chatRoomId);
    }

    /**
     * @description Secure AfuMall listings, allowing public read access but restricting writes to the seller.
     * @path /afuMallListings/{listingId}
     * @allow (get, list) - Any user can read the AfuMall listings.
     * @allow (create) - User with UID 'sellerId' can create an AfuMall listing where request.resource.data.sellerId == request.auth.uid.
     * @allow (update, delete) - User with UID 'sellerId' can update/delete their own AfuMall listing, where resource.data.sellerId == request.auth.uid.
     * @deny (create) - User with UID 'otherUserId' cannot create an AfuMall listing for another user.
     * @deny (update, delete) - User with UID 'otherUserId' cannot update/delete an AfuMall listing that they don't own.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /afuMallListings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return isSignedIn() && request.auth.uid == resource.data.sellerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Secure chat list for a user, allowing only the owner to read their chats.
     * @path /users/{userId}/chats
     * @allow (list) - User with UID 'dnSEb4FRr8gcxnQZVZSqKKJ4rAu2' can list their own chats at /users/dnSEb4FRr8gcxnQZVZSqKKJ4rAu2/chats.
     * @deny (list) - User with UID 'otherUserId' cannot list chats at /users/dnSEb4FRr8gcxnQZVZSqKKJ4rAu2/chats.
     * @principle Enforces document ownership for list operation on user's chats.
     */
    match /users/{userId}/chats/{documentId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }
  }
}