/**
 * @fileoverview Firestore Security Rules for AfuChat application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user privacy and data ownership. Each authenticated user has full access to their own data and associated subcollections.
 * Chat rooms and AfuMall listings implement shared access and public read patterns respectively, with appropriate safeguards.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /chatRooms/{chatRoomId}: Chat rooms, with access controlled via a list of participant IDs.
 * - /chatRooms/{chatRoomId}/messages/{messageId}: Chat messages within a chat room, access controlled via the parent chat room.
 * - /afuMallListings/{listingId}: Product listings in AfuMall, publicly readable but writable only by the seller.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Chat room access is based on a denormalized list of participant IDs.
 * - AfuMall listings are publicly readable but writable only by the seller.
 *
 * Denormalization for Authorization:
 * - ChatRoom documents contain a 'participantIds' array to quickly determine user access without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the user ID matches the document ID.
     * @deny (read, write) if the user is not signed in or the user ID does not match the document ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat rooms.
     * @path /chatRooms/{chatRoomId}
     * @allow (read, write) if the user is a participant in the chat room.
     * @deny (read, write) if the user is not a participant in the chat room.
     * @principle Enforces shared access based on participant list.
     */
    match /chatRooms/{chatRoomId} {
      allow get: if isParticipant(resource.data.participantIds);
      allow list: if true; // Publicly listable for discovery.  Consider tightening if needed.
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['id', 'type', 'participantIds']) && request.resource.data.id == request.resource.id;
      allow update: if isSignedIn() && isParticipant(resource.data.participantIds);
      allow delete: if false; // Deletion is not allowed for chat rooms.
    }

    /**
     * @description Controls access to chat messages within a chat room.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (read, write) if the user is a participant in the parent chat room.
     * @deny (read, write) if the user is not a participant in the parent chat room.
     * @principle Enforces shared access based on parent chat room's participant list.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
      allow get: if isParticipant(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds);
      allow list: if isParticipant(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds);
      allow create: if isSignedIn() && isParticipant(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds);
      allow update: if isSignedIn() && isParticipant(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds);
      allow delete: if isSignedIn() && isParticipant(get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participantIds);
    }

    /**
     * @description Controls access to AfuMall listings.
     * @path /afuMallListings/{listingId}
     * @allow (read) to anyone.
     * @allow (create, update, delete) only to the seller of the product.
     * @deny (create, update, delete) if the user is not the seller of the product.
     * @principle Enforces public read access with owner-only writes.
     */
    match /afuMallListings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.sellerId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.sellerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }

  function isParticipant(participantIds) {
    return isSignedIn() && participantIds is list && request.auth.uid in participantIds;
  }
}